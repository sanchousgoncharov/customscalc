import telebot
from dotenv import load_dotenv
import os
import pg8000
from pg8000.native import Connection, DatabaseError
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ForceReply

load_dotenv()

DB_CONFIG = {
    'database': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'host': os.getenv('DB_HOST'),
    'port': int(os.getenv('DB_PORT'))
}

API_TOKEN = os.getenv('ADMIN_BOT')

bot = telebot.TeleBot(API_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def get_db_connection():
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        return Connection(**DB_CONFIG)
    except DatabaseError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

def is_admin(username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = get_db_connection()
    try:
        result = conn.run(
            "SELECT id FROM admins WHERE username = :username", 
            username=username
        )
        return len(result) > 0
    finally:
        conn.close()

def get_calculation_params():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
    conn = get_db_connection()
    try:
        result = conn.run("""
            SELECT param_name, param_value, description 
            FROM calculation_params
            ORDER BY param_name
        """)
        return result
    finally:
        conn.close()

def update_param(param_name, new_value):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–∞—Å—á–µ—Ç–∞"""
    conn = get_db_connection()
    try:
        conn.run(
            """
            UPDATE calculation_params 
            SET param_value = :value, updated_at = NOW() 
            WHERE param_name = :name
            """,
            value=new_value, name=param_name
        )
    finally:
        conn.close()

def format_params(params):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return "\n".join([
        f"{row[0]}: {row[1]} ({row[2]})" 
        for row in params
    ])

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # if not is_admin(message.from_user.username):
    #     bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
    #     return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"))

    bot.send_message(
        message.chat.id,
        "üõ°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
def handle_params_menu(message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    # if not is_admin(message.from_user.username):
    #     return

    params = get_calculation_params()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    for param in params:
        markup.add(KeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {param[0]}"))
    
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(
        message.chat.id,
        f"üìã –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:\n\n{format_params(params)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text.startswith('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å '))
def select_param_to_edit(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # if not is_admin(message.from_user.username):
    #     return

    param_name = message.text.replace("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ", "")
    user_data[message.chat.id] = {'editing_param': param_name}

    bot.send_message(
        message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{param_name}':",
        reply_markup=ForceReply()
    )

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('editing_param'))
def process_param_update(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    # if not is_admin(message.from_user.username):
    #     return

    param_name = user_data[message.chat.id]['editing_param']
    
    try:
        new_value = float(message.text)
        update_param(param_name, new_value)
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        handle_params_menu(message)
        
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        )
    finally:
        if message.chat.id in user_data:
            del user_data[message.chat.id]['editing_param']

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def handle_back(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    handle_start(message)

if __name__ == '__main__':
    bot.polling(none_stop=True)